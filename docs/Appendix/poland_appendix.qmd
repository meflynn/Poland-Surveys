---
title: "Supplementary Appendix for Outside Threats and Public Perceptions of the U.S. Military in Poland"
author:
  - name: Michael A. Allen
    affiliation: Boise State University
  - name: Michael E. Flynn
    affiliation: Kansas State University
  - name: Carla Martinez Machain
    affiliation: University at Buffalo (SUNY)
  - name: Grzegorz Smulek
    affiliation: Jagiellonian University
format:
#  pdf: default
  html:
    toc: true
bibliography: ../References/references.bib
csl: ../References/apsa.csl
link-citations: true
execute: 
  eval: true
  echo: false
  warning: false
  message: false
---

```{r setup}
#| warning: false
#| message: false
#| error: false
#| echo: false

library(bayesplot) # Need for postestimation plots
library(tidyverse)
library(targets) # Need to load model objects
library(tarchetypes)
library(flynnprojects) # Use for theme
library(furrr)
library(modelsummary)
library(kableExtra)
library(here)


# Custom fonts
# # Enable custom fonts
sysfonts::font_add_google("Oswald", family = "oswald")
showtext::showtext_auto()

# Bayesplot theme adjustment.
# Bring it into line with theme_flynn()
bayesplot::bayesplot_theme_update(text = element_text(family = "oswald", size = 8),
                                  strip.text.x = element_text(family = "oswald", size = 5),
                                  plot.title = element_text(face = "bold"))

# Figure parameters
knitr::opts_chunk$set(fig.align = "center", 
                      fig.retina = 3,
                      fig.width = 6, 
                      fig.height = (6 * 0.618),
                      out.width = "100%",
                      showtext = TRUE)

# set targets configuration
tar_config_set(store = here::here('_targets'),
               script = here::here('_targets.R'))

# Need to decalre target source because I call the table function for the balance
# table below.
tar_source("../R")

# Load various model objects
tar_load(survey_clean)
tar_load(priors_clean)
tar_load(table_balance)
tar_load(model_0_bivariate)
tar_load(model_1_province)
tar_load(model_2_district)
tar_load(model_3_full_response)
tar_load(model_4_varying_effects)
tar_load(model_5_ordered_response)
tar_load(model_6_contact)
tar_load(model_7_contact_int)
tar_load(model_8_contact_int_districts)
```


# Overview

These appendices contain supplementary information for the paper Supplementary Appendix for Outside Threats and Public Perceptions of the U.S. Military in Poland. Herein we provide a number of additional resources related to the project. First, we provide basic information about the survey and data collection procedures. Second, we provide some basic descriptive statistis and information to help readers better understand the data and the distribution of key variables and responses. Third, to save space in the primary manuscript we include all of the model tables for the project here. Fourth, we also include a number of additional figures to help communicate the results of our analysis. Finally, we include a number of diagnostic plots generated from the models we run. In general, we focus on a few specific types of plots and, where necessary, on key variables. For example, traceplots for multilevel multinomial logit models can quickly become both numerous and unwiedly in the confines of a PDF or printed document. 




# Tables

This section contains a number of tables that provide descriptive insights into the data, and information on the models we run for our analysis. 


## Balance Tables

@tbl-balance-table shows the balance of the predictor variables across the four treatment groups in the experiment. Most of the variables in our models are indicator variables, and so the numbers shown in the columns correspond to the number of respondents who chose a particular response for a particular question. For example, the number of people who respond that they identify as either Male or Female.

The value in the parentheses indicates the percentage of responses that fall into each of the four treatment categories. In general, we expect this value to fall close to 25% for each row.

Last, the final column shows the total number of responses for each category/row.

We do not conduct a formal balance test, but this table helps us to ensure that the randomization procedure worked as intended. In general, we see most response-treatment groups falling at around the 25% mark, which is what we should expect if individuals were randomly assigned to one of the four treatment categories. We see more substantial deviations where the total number of observations for a given response is low. For example, with only 40 total respondents indicating that their primary income source was in the agricultural sector, small differences in the number of people who fall into each treatment group have a larger effect on the percentage value.

The final row shows the mean value and standard deviation (in parentheses) for the ideology score, which is the only ordered integer response variable we included in the survey. Since we mean-center this measure, each category should have a mean of approximately 0 and a standard deviation of 0.5. 

```{r balance-table-chunk}
#| tbl-cap: Balance table for predictors used in primary models.
#| label: tbl-balance-table
# Need to reference the source file/folder for the function I'm calling
#source("R/tables.R")

out <- table_balance_f(survey_clean)

out
```

## Model Tables

This section contains the tables for the models we run in our analysis. 

1. @tbl-bivariate shows the results of a multinomial logit model where we regress the outcome variable on the treatment group variable.
2. @tbl-base-model shows the results of our primary multinomial multilevel logit model. This model regresses the outcome response onto the treatment variable and several other predictor variables. Varying intercepts by province.
3. @tbl-district-model shows the results of our a multinomial multilevel logit model that regresses the outcome response onto the treatment variable and several other predictor variables. Varying intercepts by province and district.
4. @tbl-full-response shows the results of a model where we use the full six category response variable rather than the four category response used in our primary models.
5. @tbl-varying shows the results of a model that replicates our primary multilevel model, but allows the effects of the treatment variable to vary across province.
6. @tbl-treat-group changes the basic model specification slightly and uses the treatment group as the grouping term for the varying intercepts. We also include a variable indicating whether the respondent reported having personal contact with a U.S. service member, and we allow this effect to vary across treatment groups.
7. @tbl-contact-int builds upon our primary model in @tbl-base-model by adding a variable indicating whether the respondent reported having personal contact with a U.S. service member, and an interaction term between the contact variable and the treatment. We also include varying intercepts on province.
8. @tbl-contact-int-district replicates the models from @tbl-contact-int but includes varying intercepts on both province and district.


```{r model-tables-setup}
#| include: false

# Load various model objects
#tar_load(priors_clean)
#tar_load(model_0_bivariate)
#tar_load(model_1_province)
#tar_load(model_2_district)
#tar_load(model_3_full_response)
#tar_load(model_4_varying_effects)
#tar_load(model_5_ordered_response)
#tar_load(model_6_contact)
#tar_load(model_7_contact_int)
#tar_load(model_8_contact_int_districts)


# Set up custom tidy and glance functions
# add custom functions to extract estimates (tidy) and goodness-of-fit (glance) information
tidy.brmsfit <- function(x, ...) {
    s <- summary(x, ...)
    ret <- data.frame(
      term      = row.names(s$fixed),
      estimate  = s$fixed$Estimate,
      conf.low  = s$fixed$`l-95% CI`,
      conf.high = s$fixed$`u-95% CI`,
      group     = str_extract(row.names(s$fixed), "(?<=mu).*?(?=_)")
    ) |> 
      mutate(term = str_remove(row.names(s$fixed), "(?<=mu).*?(?=_)"))
    
      ret
}

glance.brmsfit <- function(x, ...) {

    if (length(x[["ranef"]][["group"]]) > 0) {
      temp <- data.frame("N" = nrow(x[["data"]]),
                         "N Groups" = length(unique(x[["data"]][["province"]])),
                         "Groups" = unique(x[["ranef"]][["group"]])
                         )
      

    } else {
      temp <- data.frame("N" = nrow(x[["data"]]),
                         "N Groups" = length(x[["ranef"]][["group"]])
                         )
      
    }
  
  temp
    
}


# Write a function to apply both custom tidy and glance functions to a brms model
custom.modelsummary.function <- function(x){
  
 templist <- list(
   
   "tidy" = tidy.brmsfit(x),
   "glance" = glance.brmsfit(x)
 
   )
 
 class(templist) <- "modelsummary_list"
 
 return(templist)
  
}


coef.names <- c("mu_treatment_groupEconomic" = "Economic",
                "mu_treatment_groupSecurity" = "Security",
                "mu_treatment_groupSecurityandEconomic" = "Security and Economic",
                "mu_contact_persYes" = "Personal Contact: Yes",
                "mu_contact_persDon’tknowDDeclinetoanswer" = "Personal Contact: Don't know/Decline",
                "mu_treatment_groupSecurity:contact_persYes" = "Security X Personal Contact",
                "mu_treatment_groupEconomic:contact_persYes" = "Economic X Personal Contact",
                "mu_treatment_groupSecurityandEconomic:contact_persYes" = "Security and Economic X Personal Contact",
                "mu_treatment_groupSecurity:contact_persDon’tknowDDeclinetoanswer" = "Security X Personal Contact: Don't know/Decline",
                "mu_treatment_groupEconomic:contact_persDon’tknowDDeclinetoanswer" = "Economic X Personal Contact: Don't know/Decline",
                "mu_treatment_groupSecurityandEconomic:contact_persDon’tknowDDeclinetoanswer" = "Security and Economic X Personal Contact: Don't know/Decline",
                "mu_age25to34years" = "25-34",
                "mu_age35to44years" = "35-44",
                "mu_age45to54years" = "45-54",
                "mu_age55to64years" = "55-64",
                "mu_ageAge65orolder" = "65+",
                "mu_income43340–57187" = "Second Quantile",
                "mu_income57188–74062" = "Third Quantile",
                "mu_income74063–93937" = "Fourth Quantile",
                "mu_income93938P" = "Fifth Quantile",
                "mu_incomeDeclinetoanswer" = "Income Decline",
                "mu_income_sourceFullMtimeorcontractworkinthegovernmentorpublicsector" = "Public sector contract work",
                "mu_income_sourceFullMtimeorcontractworkintheprivatesector" = "Private sector contract work",
                "mu_income_sourcePensionorretirement" = "Pension or Retirement",
                "mu_income_sourceSelfMemployednonMagricultural" = "Self-employed (non-agricultural)",
                "mu_income_sourceOthersources" = "Other sources",
                "mu_educationHigherEducationBachelorDEngineer" = "Bachelor's degree or Engineer",
                "mu_educationHigherEducationMaster’sdegreeorhigher" = "Master's degree or higher",
                "mu_educationPrimaryEducation" = "Primary Education",
                "mu_educationSecondaryEducation" = "Secondary Education",
                "mu_educationVocationalSchool" = "Vocational School",
                "mu_ideology_z" = "Ideology",
                "mu_minorityYes" = "Minority: Yes",
                "mu_minorityDeclinetoanswer" = "Minority: Decline",
                "mu_genderFemale" = "Female",
                "mu_genderNoneoftheabove" = "None of the Above",
                "mu_Intercept" = "Intercept")


# Index for variable groupings in output tables
# Create multple groupings so I can use map() to apply them each to 
# tables of different lengths / model specifications.
coef.groups.1 <- tibble::tribble(~var, ~group,
                              "mu_treatment_groupEconomic", "Treatment",
                              "mu_treatment_groupSecurity", "Treatment",
                              "mu_treatment_groupSecurityandEconomic", "Treatment")

coef.groups.2 <- tibble::tribble(~var, ~group,
                              "mu_treatment_groupEconomic", "Treatment",
                              "mu_treatment_groupSecurity", "Treatment",
                              "mu_treatment_groupSecurityandEconomic", "Treatment",
                              "mu_age25to34years", "Age",
                              "mu_age35to44years", "Age",
                              "mu_age45to54years", "Age",
                              "mu_age55to64years", "Age",
                              "mu_ageAge65orolder", "Age",
                              "mu_income43340–57187", "Income",
                              "mu_income57188–74062", "Income",
                              "mu_income74063–93937", "Income",
                              "mu_income93938P", "Income",
                              "mu_incomeDeclinetoanswer", "Income",
                              "mu_income_sourceFullMtimeorcontractworkinthegovernmentorpublicsector ", "Income Source",
                              "mu_income_sourceFullMtimeorcontractworkintheprivatesector", "Income Source",
                              "mu_income_sourcePensionorretirement", "Income Source",
                              "mu_income_sourceSelfMemployednonMagricultural", "Income Source",
                              "mu_income_sourceOthersources", "Income Source",
                              "mu_educationHigherEducationBachelorDEngineer", "Education",
                              "mu_educationHigherEducationMaster’sdegreeorhigher", "Education",
                              "mu_educationPrimaryEducation", "Education",
                              "mu_educationSecondaryEducation", "Education",
                              "mu_educationVocationalSchool", "Education",
                              "mu_ideology_z", "Ideology",
                              "mu_minorityYes", "Minority",
                              "mu_minorityDeclinetoanswer", "Minority",
                              "mu_genderFemale", "Gender",
                              "mu_genderNoneoftheabove", "Gender",
                              "mu_Intercept", "Intercept")

coef.groups.3 <- tibble::tribble(~var, ~group,
                              "mu_contact_persYes", "Contact",
                              "mu_contact_persDon’tknowDDeclinetoanswer", "Contact",
                              "mu_age25to34years", "Age",
                              "mu_age35to44years", "Age",
                              "mu_age45to54years", "Age",
                              "mu_age55to64years", "Age",
                              "mu_ageAge65orolder", "Age",
                              "mu_income43340–57187", "Income",
                              "mu_income57188–74062", "Income",
                              "mu_income74063–93937", "Income",
                              "mu_income93938P", "Income",
                              "mu_incomeDeclinetoanswer", "Income",
                              "mu_income_sourceFullMtimeorcontractworkinthegovernmentorpublicsector ", "Income Source",
                              "mu_income_sourceFullMtimeorcontractworkintheprivatesector", "Income Source",
                              "mu_income_sourcePensionorretirement", "Income Source",
                              "mu_income_sourceSelfMemployednonMagricultural", "Income Source",
                              "mu_income_sourceOthersources", "Income Source",
                              "mu_educationHigherEducationBachelorDEngineer", "Education",
                              "mu_educationHigherEducationMaster’sdegreeorhigher", "Education",
                              "mu_educationPrimaryEducation", "Education",
                              "mu_educationSecondaryEducation", "Education",
                              "mu_educationVocationalSchool", "Education",
                              "mu_ideology_z", "Ideology",
                              "mu_minorityYes", "Minority",
                              "mu_minorityDeclinetoanswer", "Minority",
                              "mu_genderFemale", "Gender",
                              "mu_genderNoneoftheabove", "Gender",
                              "mu_Intercept", "Intercept")

coef.groups.4 <- tibble::tribble(~var, ~group,
                              "mu_treatment_groupEconomic", "Treatment",
                              "mu_treatment_groupSecurity", "Treatment",
                              "mu_treatment_groupSecurityandEconomic", "Treatment",
                              "mu_contact_persYes", "Contact",
                              "mu_contact_persDon’tknowDDeclinetoanswer", "Contact",
                              "mu_treatment_groupSecurity:contact_persYes", "Interactions",
                              "mu_treatment_groupEconomic:contact_persYes", "Interactions",
                              "mu_treatment_groupSecurityandEconomic:contact_persYes", "Interactions",
                              "mu_treatment_groupSecurity:contact_persDon’tknowDDeclinetoanswer", "Interactions",
                              "mu_treatment_groupEconomic:contact_persDon’tknowDDeclinetoanswer", "Interactions",
                              "mu_treatment_groupSecurityandEconomic:contact_persDon’tknowDDeclinetoanswer", "Interactions",
                              "mu_age25to34years", "Age",
                              "mu_age35to44years", "Age",
                              "mu_age45to54years", "Age",
                              "mu_age55to64years", "Age",
                              "mu_ageAge65orolder", "Age",
                              "mu_income43340–57187", "Income",
                              "mu_income57188–74062", "Income",
                              "mu_income74063–93937", "Income",
                              "mu_income93938P", "Income",
                              "mu_incomeDeclinetoanswer", "Income",
                              "mu_income_sourceFullMtimeorcontractworkinthegovernmentorpublicsector ", "Income Source",
                              "mu_income_sourceFullMtimeorcontractworkintheprivatesector", "Income Source",
                              "mu_income_sourcePensionorretirement", "Income Source",
                              "mu_income_sourceSelfMemployednonMagricultural", "Income Source",
                              "mu_income_sourceOthersources", "Income Source",
                              "mu_educationHigherEducationBachelorDEngineer", "Education",
                              "mu_educationHigherEducationMaster’sdegreeorhigher", "Education",
                              "mu_educationPrimaryEducation", "Education",
                              "mu_educationSecondaryEducation", "Education",
                              "mu_educationVocationalSchool", "Education",
                              "mu_ideology_z", "Ideology",
                              "mu_minorityYes", "Minority",
                              "mu_minorityDeclinetoanswer", "Minority",
                              "mu_genderFemale", "Gender",
                              "mu_genderNoneoftheabove", "Gender",
                              "mu_Intercept", "Intercept")

# Combine coefficient labels into a single list.
# One list entry for each table. 
# Note that some tables share the same coefficient list so 
# a given list may appear repeatedly.

group.list <- list(coef.groups.1,
                   coef.groups.2,
                   coef.groups.2,
                   coef.groups.2,
                   coef.groups.2,
                   coef.groups.3,
                   coef.groups.4,
                   coef.groups.4
                   )


```



```{r table-output}
#| include: false


# Create list of model groups
modlist <- list(
  "Bivariate" = model_0_bivariate,
  "Base Model" = model_1_province,
  "District Model" = model_2_district,
  "Full Response Variable" = model_3_full_response,
  "Group Effects" = model_4_varying_effects,
  #"Ordered Response" = model_5_ordered_response,
  "Personal Contact with Treatment Groupings" = model_6_contact,
  "Contact and Treatment Interaction" = model_7_contact_int,
  "Contact and Treatment Interaction (Districts)" = model_8_contact_int_districts
)

# Name each nested model according to outcome variable distance.
named.mod.list <- future_map(
  .x = modlist,
  .f = ~ set_names(.x, c("Distance: 100k", "Distance: 5k"))
)

# Create nested map function to apply custom tidy and glance function 
# to all brms models and convert lists to modelsummary_list.
named.mod.list.custom <- future_map(
  .x = seq_along(named.mod.list),
  .f = ~ map(
    .x = named.mod.list[[.x]],
    .f = \(x) custom.modelsummary.function(x)
  )
)

# Create modelsummary tables of all models in custom list.
# Export this as a kableExtra object so I can apply grouping labels
tables.out <- future_map2(
  .x = seq_along(named.mod.list.custom),
  .y = seq_along(named.mod.list),
  .f = ~modelsummary::modelsummary(named.mod.list.custom[[.x]],
                                   estimate = "estimate",
                                   statistic = "[{conf.low}, {conf.high}]",
                                   conf_level = 0.89,
                                   shape = term ~ model + group,
                                   coef_map = coef.names,
                                   title = glue::glue("{names(named.mod.list[.y])}"),
                                   fmt = fmt_decimal(digits = 3),
                                   output = "kableExtra") |> 
    kableExtra::kable_styling(bootstrap_options = "striped",
                              font_size = 8) 
) 


# use map2() to apply the group labels/lists (.y) to the list of tables (.x)
tables.out.grouped <- future_map2(
  .x = seq_along(tables.out),
  .y = seq_along(group.list),
  .f = ~ tables.out[[.x]] |> kableExtra::group_rows(index = setNames(rle(group.list[[.y]]$group)[[1]]*2, rle(group.list[[.y]]$group)[[2]]),
                                                    background = "deepskyblue")
)

```


```{r bivariate-model-table}
#| tbl-cap: Multinomial logistic regressions with treatment effects and outcome response. Models only include the treatment received by the respondent and their response.
#| label: tbl-bivariate
tables.out.grouped[[1]]

```


```{r base-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province.
#| label: tbl-base-model

tables.out.grouped[[2]]

```


```{r district-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province and district. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province and by district.
#| label: tbl-district-model
#| 
tables.out.grouped[[3]]

```


```{r full-response-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province. Here we use the original six response categories rather than the four aggregated categories from the main model.
#| label: tbl-full-response

tables.out.grouped[[4]]

```


```{r varying-effects-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province. We also allow the effect of the treatment variables to vary by province.
#| label: tbl-varying
tables.out.grouped[[5]]

```

```{r treatment-group-contact-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by treatment groups These model the response as a function of several predictor variables, with varying intercepts by province. We also allow the effect of contact to vary by treatment group.
#| label: tbl-treat-group
tables.out.grouped[[6]]

```

```{r contact-int-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province. Here we interact the contact variable with the treatment variable to see if the effect of the treatment is conditioned by reported personal contact.
#| label: tbl-contact-int
#| 
tables.out.grouped[[7]]

```

```{r contact-int-district-model-table}
#| tbl-cap: Multilevel multinomial logistic regressions with respondents grouped by province and district. These model the response as a function of the treatment variables and several predictor variables, with varying intercepts by province and by district. Here we interact the contact variable with the treatment variable to see if the effect of the treatment is conditioned by reported personal contact.
#| label: tbl-contact-int-district

tables.out.grouped[[7]]

```

# Results Figures

## Effect of Distance on Expressed Attitudes

### Province-Level Models

![Contrasts between distance for control group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contrasts-control:5k-control:100k.png){#fig-distance-control}

![Contrasts between distance for security treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/security:5k-security:100k.png){#fig-distance-sec}

![Contrasts between distance for economic treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contrasts-economic:5k-economic:100k.png){#fig-distance-econ}

![Contrasts between distance for combined security and economic treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contrasts-securityandeconomic:5k-securityandeconomic:100k.png){#fig-distance-sececon}


## Moderating Effect of Contact

### Province-Level Contact Models 

![Contrasts between contact groups and distance for control group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contact-contrasts-control:5k-control:100k.png){#fig-con-control}

![Contrasts between contact groups and distance for security treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contact-contrasts-security:5k-security:100k.png){#fig-con-sec}

![Contrasts between contact groups and distance for economic treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contact-contrasts-economic:5k-economic:100k.png){#fig-con-econ}

![Contrasts between contact groups and distance for combined security and economic treatment group. 50% and 89% credible intervals shown around point estimate. Dots represent distribution quantiles from posterior sample draws. Dot coloring indicates portion of posterior samples that fall above or below 0. Pr(Direction) value indicates the probability or proportion of the posterior samples that fall above or below 0 on the same side as the median of the posterior.](../Figures/contact-contrasts-securityandeconomic:5k-securityandeconomic:100k.png){#fig-con-sececon}


# Model Prior Information

The table below shows a data.frame containing the priors used in our primary models. These prior values are based on the results of @Allen2020 and @Allenetal2022

```{r prior-table}

kableExtra::kbl(priors_clean,
                caption = "Priors used in choice models") |> 
  kableExtra::kable_styling(latex_options = c("scale_down", "striped", "repeat_header"),
                            full_width = TRUE,
                            font_size = 5,
                            position = "center") |> 
  kableExtra::scroll_box(height = "500px")

```

# Model Diagnostics

The following section contains model diagnostic plots for all of the models included in our analysis, as well as supplementary analyses.


## Traceplots

```{r bivar-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from bivariate models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_0_bivariate[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Bivariate Models, 100k")
```

```{r bivar-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from bivariate models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_0_bivariate[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Bivariate Models, 5k")
```




```{r province-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from province models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_1_province[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Province Models, 100k")
```

```{r province-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from province models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_1_province[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Province Models, 5k")
```



```{r district-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from district models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_2_district[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "District Models, 100k")
```

```{r district-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from district models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_2_district[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "District Models, 5k")
```




```{r full-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from full response models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_3_full_response[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Full Response Models, 100k")
```

```{r full-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from full response models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_3_full_response[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Full Response Models, 5k")
```




```{r ve-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from varying effects models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_4_varying_effects[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Varying effects Models, 100k")
```

```{r ve-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from varying effects models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_4_varying_effects[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Varying Effects Models, 5k")
```




```{r ordered-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from ordered models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_5_ordered_response[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Ordered Models, 100k")
```

```{r ordered-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from ordered models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_5_ordered_response[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Ordered Models, 5k")
```




```{r contact-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_6_contact[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact Models, 100k")
```

```{r contact-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_6_contact[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact Models, 5k")
```





```{r contact-interaction-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact and treatment interaction models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_7_contact_int[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact and Treatment Interaction Models, 100k")
```

```{r contact-interaction-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact and treatment interaction models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_7_contact_int[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact and Treatment Interaction Models, 5k")
```




```{r contact-interaction-districts-traceplots-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact models, outcome question: 100k distance."

bayesplot::mcmc_trace(model_8_contact_int_districts[[1]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact and Treatment Interaction District Models, 100k")
```

```{r contact-interaction-districts-traceplots-5k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Traceplots for treatment variables from contact models, outcome question: 5k distance."

bayesplot::mcmc_trace(model_8_contact_int_districts[[2]],
                      regex_pars = c(".*treatment.*")) +
  labs(title = "Contact and Treatment Interaction District Models, 5k")
```





## Rhat Statistics

```{r bivar-rhat-100k}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics for parameters from bivariate models."

temp <- map(.x = seq_along(model_0_bivariate),
    .f = ~brms::mcmc_plot(model_0_bivariate[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_1_province[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r province-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics for beta parameters from province models."

temp <- map(.x = seq_along(model_1_province),
    .f = ~brms::mcmc_plot(model_1_province[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_1_province[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```





```{r district-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics for district models."

temp <- map(.x = seq_along(model_2_district),
    .f = ~brms::mcmc_plot(model_2_district[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_2_district[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```





```{r full-response-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics for full response models."

temp <- map(.x = seq_along(model_3_full_response),
    .f = ~brms::mcmc_plot(model_3_full_response[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_3_full_response[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r varying-effects-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics for varying treatment effects models."

temp <- map(.x = seq_along(model_4_varying_effects),
    .f = ~brms::mcmc_plot(model_4_varying_effects[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_4_varying_effects[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r ordered-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics ordered models."

temp <- map(.x = seq_along(model_5_ordered_response),
    .f = ~brms::mcmc_plot(model_5_ordered_response[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_5_ordered_response[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r contact-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics contact models."

temp <- map(.x = seq_along(model_6_contact),
    .f = ~brms::mcmc_plot(model_6_contact[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_6_contact[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r contact-interaction-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics contact interaction models."

temp <- map(.x = seq_along(model_7_contact_int),
    .f = ~brms::mcmc_plot(model_7_contact_int[[.x]],
                type = "rhat") +
  theme(text = element_text(family = "oswald")) +
  labs(title = glue::glue("{gsub('troops', '', model_7_contact_int[[.x]]$formula$resp)}"))
)

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```




```{r contact-interaction-district-rhat}
#| message: false
#| warning: false
#| echo: false
#| fig-cap: "Rhat statistics contact interaction district models."

temp <- map(.x = seq_along(model_8_contact_int_districts),
            .f = ~brms::mcmc_plot(model_8_contact_int_districts[[.x]],
                                  type = "rhat") +
              theme(text = element_text(family = "oswald")) +
              labs(title = glue::glue("{gsub('troops', '', model_8_contact_int_districts[[.x]]$formula$resp)}"))
            )

patchwork::wrap_plots(temp[[1]],
                      temp[[2]])
```



\newpage


# References

::: {#refs}
:::
